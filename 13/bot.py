import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from db import init_db, add_record, get_stats

# üîë –¢–æ–∫–µ–Ω —á–∏—Ç–∞—î–º–æ –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("API_TOKEN is not set. Please provide it via environment variable.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
init_db()

HELP_TEXT = """
–Ø —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ç—Ä–µ–∫–µ—Ä ü§ñ
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/help - –¥–æ–ø–æ–º–æ–≥–∞
/week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
/month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å
/all - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å —á–∞—Å
/balance - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å

–©–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É:
-200 —ó–∂–∞

–©–æ–± –¥–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥:
+15000 –∑–∞—Ä–ø–ª–∞—Ç–∞
"""

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply(HELP_TEXT)

@dp.message_handler(commands=["balance"])
async def balance(message: types.Message):
    _, income, expense = get_stats(message.from_user.id, "all")
    await message.reply(f"üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {income - expense:.2f} –≥—Ä–Ω\nüíµ –î–æ—Ö—ñ–¥: {income:.2f} –≥—Ä–Ω\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {expense:.2f} –≥—Ä–Ω")

@dp.message_handler(commands=["week", "month", "all"])
async def stats(message: types.Message):
    period = message.text.strip("/").lower()
    expenses, income, expense = get_stats(message.from_user.id, period)

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({period}):\n\n"
    for cat, total in expenses:
        text += f"‚Ä¢ {cat}: {total:.2f} –≥—Ä–Ω\n"

    text += f"\nüíµ –î–æ—Ö—ñ–¥: {income:.2f} –≥—Ä–Ω"
    text += f"\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {expense:.2f} –≥—Ä–Ω"
    text += f"\nüìà –ë–∞–ª–∞–Ω—Å: {income - expense:.2f} –≥—Ä–Ω"

    await message.reply(text)

@dp.message_handler()
async def add_record_handler(message: types.Message):
    text = message.text.strip()

    if text.startswith("+"):  # –¥–æ—Ö—ñ–¥
        try:
            parts = text[1:].split(" ", 1)
            amount = float(parts[0])
            category = parts[1] if len(parts) > 1 else "–Ü–Ω—à–µ"
            add_record(message.from_user.id, amount, category, "income")
            await message.reply(f"‚úÖ –î–æ—Ö—ñ–¥ {amount} –≥—Ä–Ω –¥–æ–¥–∞–Ω–æ (–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category})")
        except:
            await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
    elif text.startswith("-"):  # –≤–∏—Ç—Ä–∞—Ç–∞
        try:
            parts = text[1:].split(" ", 1)
            amount = float(parts[0])
            category = parts[1] if len(parts) > 1 else "–Ü–Ω—à–µ"
            add_record(message.from_user.id, amount, category, "expense")
            await message.reply(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ {amount} –≥—Ä–Ω –¥–æ–¥–∞–Ω–∞ (–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category})")
        except:
            await message.reply("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: -200 —ó–∂–∞")
    else:
        await message.reply("–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π + –∞–±–æ - –¥–ª—è –¥–æ—Ö–æ–¥—É/–≤–∏—Ç—Ä–∞—Ç–∏.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
